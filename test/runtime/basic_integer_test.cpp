#include <catch2/catch_test_macros.hpp>
#include <big_num/basic_integer.hpp>

using namespace dark;
using namespace dark::internal;

TEST_CASE("Dynamic Signed Basic Integer", "[dynamic_signed_basic_integer]") {
	SECTION("Construction") {
		{
			
			auto num = BigInteger::from("827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");

			REQUIRE(num.has_value());
			REQUIRE(num->to_str(Radix::Hex) == "1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806728669512360f371e015112ed5028ce");
			REQUIRE(num->to_str(Radix::Dec) == "827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
			REQUIRE(num->to_str(Radix::Octal) == "1523637721345700463652101374623724446216777314645517001471206322504433017156170012421135524024316");
			REQUIRE(num->to_str(Radix::Binary) == "1101010011110011111111010001011100101111000000100110011110101010001000001011111100110010011111010100100100110010001110111111111011001100110100101101001111000000001100111001010000110011010010101000100100011011000001111001101110001111000000001010100010001001011101101010100000010100011001110");
		}
		{
			
			auto num = BigInteger::from("-827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");

			REQUIRE(num.has_value());
			REQUIRE(num->to_str(Radix::Hex) == "-1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806728669512360f371e015112ed5028ce");
			REQUIRE(num->to_str(Radix::Dec) == "-827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
			REQUIRE(num->to_str(Radix::Octal) == "-1523637721345700463652101374623724446216777314645517001471206322504433017156170012421135524024316");
			REQUIRE(num->to_str(Radix::Binary) == "-1101010011110011111111010001011100101111000000100110011110101010001000001011111100110010011111010100100100110010001110111111111011001100110100101101001111000000001100111001010000110011010010101000100100011011000001111001101110001111000000001010100010001001011101101010100000010100011001110");
			REQUIRE(num->is_neg());
		}
		{
			
			auto num = BigInteger::from("-+827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
			REQUIRE(!num.has_value());
		}
		{
			
			auto num = BigInteger::from("0x1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806728669512360f371e015112ed5028ce");

			REQUIRE(num.has_value());
			REQUIRE(num->to_str(Radix::Dec) == "827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
			REQUIRE(num->to_str(Radix::Hex) == "1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806728669512360f371e015112ed5028ce");
			REQUIRE(num->to_str(Radix::Octal) == "1523637721345700463652101374623724446216777314645517001471206322504433017156170012421135524024316");
			REQUIRE(num->to_str(Radix::Binary) == "1101010011110011111111010001011100101111000000100110011110101010001000001011111100110010011111010100100100110010001110111111111011001100110100101101001111000000001100111001010000110011010010101000100100011011000001111001101110001111000000001010100010001001011101101010100000010100011001110");
		}
		{
			
			auto num = BigInteger::from("0o1523637721345700463652101374623724446216777314645517001471206322504433017156170012421135524024316");

			REQUIRE(num.has_value());
			REQUIRE(num->to_str(Radix::Dec) == "827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
			REQUIRE(num->to_str(Radix::Hex) == "1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806728669512360f371e015112ed5028ce");
			REQUIRE(num->to_str(Radix::Octal) == "1523637721345700463652101374623724446216777314645517001471206322504433017156170012421135524024316");
			REQUIRE(num->to_str(Radix::Binary) == "1101010011110011111111010001011100101111000000100110011110101010001000001011111100110010011111010100100100110010001110111111111011001100110100101101001111000000001100111001010000110011010010101000100100011011000001111001101110001111000000001010100010001001011101101010100000010100011001110");
		}
		{
			
			auto num = BigInteger::from("0b1101010011110011111111010001011100101111000000100110011110101010001000001011111100110010011111010100100100110010001110111111111011001100110100101101001111000000001100111001010000110011010010101000100100011011000001111001101110001111000000001010100010001001011101101010100000010100011001110");

			REQUIRE(num.has_value());
			REQUIRE(num->to_str(Radix::Dec) == "827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
			REQUIRE(num->to_str(Radix::Hex) == "1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806728669512360f371e015112ed5028ce");
			REQUIRE(num->to_str(Radix::Octal) == "1523637721345700463652101374623724446216777314645517001471206322504433017156170012421135524024316");
			REQUIRE(num->to_str(Radix::Binary) == "1101010011110011111111010001011100101111000000100110011110101010001000001011111100110010011111010100100100110010001110111111111011001100110100101101001111000000001100111001010000110011010010101000100100011011000001111001101110001111000000001010100010001001011101101010100000010100011001110");
		}
		{
			auto num = BigInteger("827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");

			REQUIRE(num.to_str(Radix::Dec) == "827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
			REQUIRE(num.to_str(Radix::Hex) == "1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806728669512360f371e015112ed5028ce");
			REQUIRE(num.to_str(Radix::Octal) == "1523637721345700463652101374623724446216777314645517001471206322504433017156170012421135524024316");
			REQUIRE(num.to_str(Radix::Binary) == "1101010011110011111111010001011100101111000000100110011110101010001000001011111100110010011111010100100100110010001110111111111011001100110100101101001111000000001100111001010000110011010010101000100100011011000001111001101110001111000000001010100010001001011101101010100000010100011001110");
		}
	}

	SECTION("Exceptions thrown while constructing") {

		REQUIRE_THROWS(BigInteger("0o9"));
		REQUIRE_THROWS(BigInteger("0t9"));
		REQUIRE_THROWS(BigInteger("+-0t9"));
		REQUIRE_THROWS(BigInteger("=0t9"));

	}

	SECTION("To string with prefix") {
		auto num = BigInteger::from("827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");

		REQUIRE(num.has_value());
		REQUIRE(num->to_str(Radix::Dec, true) == "827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
		REQUIRE(num->to_str(Radix::Hex, true) == "0x1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806728669512360f371e015112ed5028ce");
		REQUIRE(num->to_str(Radix::Octal, true) == "0o1523637721345700463652101374623724446216777314645517001471206322504433017156170012421135524024316");
		REQUIRE(num->to_str(Radix::Binary, true) == "0b1101010011110011111111010001011100101111000000100110011110101010001000001011111100110010011111010100100100110010001110111111111011001100110100101101001111000000001100111001010000110011010010101000100100011011000001111001101110001111000000001010100010001001011101101010100000010100011001110");
	}

	SECTION("Addition") {
		auto a = BigInteger::from("827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
		auto b = BigInteger::from("0x1234567890abcdef0123456789abdef");
		REQUIRE(a.has_value());
		REQUIRE(b.has_value());

		auto res = *a + *b;
		REQUIRE(res.to_str(Radix::Hex, true) == "0x1a9e7fa2e5e04cf54417e64fa926477fd99a5a780684babfc9b40cc160e13856965eae6bd");
	}

	SECTION("Subtraction") {
		{
			auto a = BigInteger::from("827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
			auto b = BigInteger::from("0x1234567890abcdef0123456789abdef");
			REQUIRE(a.has_value());
			REQUIRE(b.has_value());

			auto res = *a - *b;
			REQUIRE(res.to_str(Radix::Hex, true) == "0x1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806605212d892b52582def1cbc74b56adf");
		}
		{
			auto a = BigInteger::from("827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
			auto b = BigInteger::from("0x1234567890abcdef0123456789abdef");
			REQUIRE(a.has_value());
			REQUIRE(b.has_value());

			auto res = *b - *a;
			REQUIRE(res.to_str(Radix::Hex, true) == "-0x1a9e7fa2e5e04cf54417e64fa926477fd99a5a7806605212d892b52582def1cbc74b56adf");
		}
	}

	SECTION("Multiplication") {
		auto a = BigInteger::from("827394650391827364598273645982736459827364598273645982736459827364598273645982736459982");
		auto b = BigInteger::from("0x1234567890abcdef0123456789abdef");
		REQUIRE(a.has_value());
		REQUIRE(b.has_value());

		{ // Naive Algo
			auto res = a->mul(*b, MulKind::Naive);	
			REQUIRE(res.has_value());
			REQUIRE(res->to_str(Radix::Hex, true) == "0x1e49629297809a2a504978d7f7834d04839d3a13be7ec1a9625b4b26cd0f81fb109e63c50c11685312c257fa0698c6cd7e22e52");
		}
		{ // Karatsuba Algo
			auto res = a->mul(*b, MulKind::Karatsuba);	
			REQUIRE(res.has_value());
			REQUIRE(res->to_str(Radix::Hex, true) == "0x1e49629297809a2a504978d7f7834d04839d3a13be7ec1a9625b4b26cd0f81fb109e63c50c11685312c257fa0698c6cd7e22e52");
		}
		{ // Karatsuba Algo
			auto res = a->mul(*b, MulKind::NTT);	
			REQUIRE(res.has_value());
			REQUIRE(res->to_str(Radix::Hex, true) == "0x1e49629297809a2a504978d7f7834d04839d3a13be7ec1a9625b4b26cd0f81fb109e63c50c11685312c257fa0698c6cd7e22e52");
		}
	}
}

TEST_CASE("Dynamic Unsigned Basic Integer", "[dynamic_unsigned_basic_integer]") {
	SECTION("Construction") {
		{
			auto num = UBigInteger::from("123");
			REQUIRE(num.has_value());
			REQUIRE(num->to_str(Radix::Hex) == "7b");
			REQUIRE(num->to_str(Radix::Dec) == "123");
			REQUIRE(num->to_str(Radix::Octal) == "173");
			REQUIRE(num->to_str(Radix::Binary) == "1111011");
		}
		{
			auto num = UBigInteger::from("-123");
			REQUIRE(!num.has_value());
		}
		{
			auto num = UBigInteger("123");
			REQUIRE(num.to_str(Radix::Hex) == "7b");
			REQUIRE(num.to_str(Radix::Dec) == "123");
			REQUIRE(num.to_str(Radix::Octal) == "173");
			REQUIRE(num.to_str(Radix::Binary) == "1111011");
		}
	}
}

TEST_CASE("Static Signed Basic Integer", "[static_signed_basic_integer]") {
	SECTION("Construction") {
		{
			auto num = StaticBigInteger<64 /*Bits*/>::from("123");
			REQUIRE(num.has_value());
			REQUIRE(num->to_str(Radix::Hex) == "7b");
			REQUIRE(num->to_str(Radix::Dec) == "123");
			REQUIRE(num->to_str(Radix::Octal) == "173");
			REQUIRE(num->to_str(Radix::Binary) == "1111011");
		}
		{
			auto num = StaticBigInteger<64>::from("-123");
			REQUIRE(num.has_value());
			REQUIRE(num->to_str(Radix::Hex) == "-7b");
			REQUIRE(num->to_str(Radix::Dec) == "-123");
			REQUIRE(num->to_str(Radix::Octal) == "-173");
			REQUIRE(num->to_str(Radix::Binary) == "-1111011");
		}
		{
			auto num = StaticBigInteger<16>("123");
			REQUIRE(num.to_str(Radix::Hex) == "7b");
			REQUIRE(num.to_str(Radix::Dec) == "123");
			REQUIRE(num.to_str(Radix::Octal) == "173");
			REQUIRE(num.to_str(Radix::Binary) == "1111011");
		}
	}
}

TEST_CASE("Static Unsigned Basic Integer", "[static_unsigned_basic_integer]") {
	SECTION("Construction") {
		{
			auto num = StaticUBigInteger<64 /*Bits*/>::from("123");
			REQUIRE(num.has_value());
			REQUIRE(num->to_str(Radix::Hex) == "7b");
			REQUIRE(num->to_str(Radix::Dec) == "123");
			REQUIRE(num->to_str(Radix::Octal) == "173");
			REQUIRE(num->to_str(Radix::Binary) == "1111011");
		}
		{
			auto num = StaticUBigInteger<64>::from("-123");
			REQUIRE(!num.has_value());
		}
		{
			auto num = StaticUBigInteger<16>("123");
			REQUIRE(num.to_str(Radix::Hex) == "7b");
			REQUIRE(num.to_str(Radix::Dec) == "123");
			REQUIRE(num.to_str(Radix::Octal) == "173");
			REQUIRE(num.to_str(Radix::Binary) == "1111011");
		}
	}
}

