from typing import List
from galois import ntt, intt, primitive_root

BITS = 62
HALF_BITS = BITS >> 1
MAX_VALUE = (1<<BITS)
HALF_MAX_VALUE = (1 << HALF_BITS)

MOD = 3006819284014656913409
GEN = 3

def convert(l: List[int]) -> int:
    a = 0
    for x in l[::-1]:
        a = a * MAX_VALUE + x

    return a

def toInternal(n: int) -> List[int]:
    a: List[int] = []
    while n:
        a.append(n % MAX_VALUE)
        n //= MAX_VALUE
    return a

def cal_size(lhs: int, rhs: int) -> int:
    if lhs == 0 or rhs == 0:
        return 0
    n = 1
    while n < lhs or n < rhs:
        n <<= 1

    if n & (n - 1):
        return n
    n <<= 1
    return n
def highestPowerof2(n):
 
    res = 0;
    for i in range(n, 0, -1):
         
        # If i is a power of 2
        if ((i & (i - 1)) == 0):
         
            res = i;
            break;
         
    return res;

def cal_block_size(n: int, alloc: int) -> int:
    size = (n * BITS + HALF_BITS - 1) / HALF_BITS
    if size <= alloc:
        return alloc
    return highestPowerof2(size)
    
def bin_pow(n: int, p: int, mod: int) -> int:
    res = 1
    while p:
        if (p & 1):
            res = (res * n) % mod
        n = (n * n) % mod
        p >>= 1
    return res

def copy_to_half_block(arr: List[int], size: int) -> List[int]:
    res = [0] * size

    j = 0
    for i in range(len(arr)):
        el = arr[i]
        low = el % HALF_MAX_VALUE
        high = el // HALF_MAX_VALUE
        res[j + 0] = low
        res[j + 1] = high
        j += 2

    return res

def copy_to_full_block(arr: List[int]) -> List[int]:
    carry = 0
    for i in range(len(arr)):
        acc = carry + arr[i];
        carry = acc // HALF_MAX_VALUE
        arr[i] = acc % HALF_MAX_VALUE

    if carry:
        arr.append(carry)
        arr.append(0)
    res = [0] * len(arr)
    j = 0
    for i in range(0, len(arr), 2):
        low = arr[i + 0]
        high = arr[i + 1]
        temp = (high << HALF_BITS) | low
        res[j] = temp
        j += 1

    return res

class Montogometry:
    def __init__(self) -> None:
        self.n = MOD


def helper(LHS: List[int], RHS: List[int], size: int) -> List[int]:
    size = max(cal_block_size(len(LHS), size), cal_block_size(len(RHS), size))
    l = copy_to_half_block(LHS, size)
    r = copy_to_half_block(RHS, size)

    l = ntt(l, modulus=MOD, size=size)
    r = ntt(r, modulus=MOD, size=size)

    res = l * r

    res = intt(res, modulus=MOD, size=size, scaled=True)
    
    return copy_to_full_block(res.tolist())

LHS = toInternal
RHS = toInternal(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)

N = cal_size(len(LHS), len(RHS))

# print(f"PR: {primitive_root(MOD)}")
#
res = helper(LHS, RHS, N)
print(f"{res=}\nRes: {convert(res)}")

