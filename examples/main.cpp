#include <algorithm>
#include <cstdint>
#include <limits>
#include <print>
#include "big_num/internal/add_sub.hpp"
#include "big_num/internal/cmp.hpp"
#include "big_num/internal/integer.hpp"
#include "big_num/internal/integer_parse.hpp"
#include "big_num/internal/mul/karatsuba.hpp"
#include "big_num/internal/mul/naive.hpp"
#include "big_num/internal/mul/toom_cook.hpp"
#include "big_num/internal/ops.hpp"
#include "ui/features.hpp"

using namespace big_num;

int main2() {
    using val_t = internal::Integer::value_type;
    val_t a = std::numeric_limits<val_t>::max();
    val_t b = std::numeric_limits<val_t>::max();
    auto [l, h] = internal::detail::full_width_naive_mul(a, b);
    auto r = (std::uint64_t{h} << 32) | l;
    std::println("RESULT: {} * {} = {}", a, b, r, h, l);
    return 0;
}

int main() {
// Dec: 6604876475938242194892411578156593877840801609753513933287115871484185839894719659342320947112201868
// Hex: 0xc14307cab6742c50bcd2440fde176bb206320ebd0cfdf6ec8d4d0632342c86cd08ff46a4bdf73984e8c
// Bin: 0b11000001010000110000011111001010101101100111010000101100010100001011110011010010010001000000111111011110000101110110101110110010000001100011001000001110101111010000110011111101111101101110110010001101010011010000011000110010001101000010110010000110110011010000100011111111010001101010010010111101111101110011100110000100111010001100
// Oct: 0o301206037125547205424136322210077360566566201431016572063757556621523203062150262066320437721522275756346047214
// [1939361420, 1758762942, 565396031, 51976726, 1995214157, 494541307, 784865480, 545190075, 1158401316, 2035732101, 3166401]

    auto a = internal::Integer{};
    auto b = internal::Integer{};
    [[maybe_unused]] auto num = "6684342362812754443883928380236271303362835211183946167550587381150565224039334324197388442712658465718931874866247693927850241130213365688967890576294926310367035494318928878739672524203756793307391464338085252008227794202175003492432194786221221376013358593133114303920541773452271761593582406223138294029590631907816793806006011591134964715102448912818189484438433664891320105278202775990196482360508992826546658279352895780581384452384987749396148978025401091905453839497239464891691683671636366968817645279944880614419040786238845638570695638646420227785408002675749997524627276797468973347581337101030343129882554628030761866160103387570476993075188995432021517208701958923181128979722077618204808136356370667179361933898578447297048778324963792508301172507114130431205692126516114099333544254081";
    auto err = internal::parse_integer(
        a,
        num
    );

    if (!err) {
        std::println("Error: {}", err.error());
    }

    [[maybe_unused]] auto num2 = "306148553827645126378519434018193318495011822711963727391209954020528493864535209911159790699446229795516566739272057174475304538951592019486676553726213677917762908009727837714458341572581842964938427";
    err = internal::parse_integer(
        b,
        num2
    );

    if (!err) {
        std::println("Error: {}", err.error());
    }

    // std::println("Cap A: {}, B: {}", a.cap(), b.cap());

    // std::println("A: {}", std::span<internal::Integer::value_type>(a));
    // std::println("B: {}", std::span<internal::Integer::value_type>(b));
    // std::println("AS: {}", internal::to_string(a, 10, { .show_prefix = true }));
    // std::println("BS: {}", internal::to_string(b, 10, { .show_prefix = true }));

    auto out = internal::Integer{};
    // internal::sub(out, a, b);
    internal::toom_cook_3<2>(out, b, b);
    // internal::pow(a, 4u);
    // out = a;

    std::println("\nAdd: {}", std::span<internal::Integer::value_type>(out));
    std::println("String: {}\n", internal::to_string(out, 10, { .show_prefix = true }));
    //
    auto res = internal::Integer{};
    auto _ = internal::parse_integer(res, "93726937010758525361568165232213125729181567168098247857434757163760538254398327206353332673588258725984429341181550066182489257237158562840601358466718578385899070479669627503139510111105404630376845702929784529306775592308876037951337193510205917426281330114934413312005944129452349596344029057728273766786046215652529254362619060689891384832144926202145126620496016539624336264622827591235901234329");
    std::println("REsult: {}", internal::to_string(res, 10, { .show_prefix = true }));
    std::println("Result Blocks: {}", std::span<internal::Integer::value_type>(res));
    std::println("IsSame: {}", internal::equal(out, res));
    return 0;
}
